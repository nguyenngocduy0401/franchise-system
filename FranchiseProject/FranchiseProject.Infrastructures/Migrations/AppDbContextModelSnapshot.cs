// <auto-generated />
using System;
using FranchiseProject.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FranchiseProject.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be37023d-6a58-4b4b-92e5-39dcece45473"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Status = 2
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.AppointmentDetail", b =>
                {
                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId", "UserId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompletionCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assessments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf0ecd1a-27ba-4295-ba44-9d32bb103595"),
                            CompletionCriteria = "0",
                            Content = "Điểm danh",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Method = 1,
                            Number = 1,
                            Quantity = 1,
                            Type = "Participation",
                            Weight = 10.0
                        },
                        new
                        {
                            Id = new Guid("74a5614a-56e5-43c9-9d9d-beb0ecda76c1"),
                            CompletionCriteria = "0",
                            Content = "Luyện tập",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "20 phút",
                            IsDeleted = false,
                            Method = 1,
                            Number = 2,
                            Quantity = 2,
                            QuestionType = "Trắc nghiệm",
                            Type = "Progress test",
                            Weight = 20.0
                        },
                        new
                        {
                            Id = new Guid("9841a317-70c1-4433-9644-a059194ef27d"),
                            CompletionCriteria = "0",
                            Content = "Kiểm tra giữa khóa",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "Tại nhà",
                            IsDeleted = false,
                            Method = 0,
                            Number = 3,
                            Quantity = 1,
                            QuestionType = "Giáo viên tự chọn",
                            Type = "Assignment",
                            Weight = 30.0
                        },
                        new
                        {
                            Id = new Guid("a385db00-01b3-46d0-932c-5c0d3a6a3fe9"),
                            CompletionCriteria = "4",
                            Content = "Kiểm tra cuối khóa",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "20 phút",
                            IsDeleted = false,
                            Method = 1,
                            Number = 4,
                            Quantity = 1,
                            QuestionType = "Trắc nghiệm",
                            Type = "Final Exam",
                            Weight = 40.0
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.AssignmentSubmit", b =>
                {
                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileSubmitURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentSubmits");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Attendance", b =>
                {
                    b.Property<Guid?>("ClassScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ClassScheduleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa0ef489-0a03-4901-8e0a-70fd69b324d3"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chương này sẽ trình bày cách một chương trình được tạo ra từ mã nguồn, biên dịch thành mã máy và được chạy trên máy tính. Học viên sẽ tìm hiểu về quá trình chuyển đổi từ mã lệnh thành một chương trình thực thi...",
                            IsDeleted = false,
                            Number = 1,
                            Topic = "Chương 1 : Giới thiệu về chương trình và cách nó hoạt động trên máy tính"
                        },
                        new
                        {
                            Id = new Guid("c89711d7-1e02-4ec8-8c6f-7e232aa50f8c"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giải thích về khái niệm biến, biểu thức và các phép toán cơ bản trong lập trình C. Chương này sẽ cung cấp các ví dụ minh họa cách khai báo và sử dụng biến, cách thực hiện các phép toán số học...",
                            IsDeleted = false,
                            Number = 2,
                            Topic = "Chương 2 : Biến, biểu thức và các phép toán cơ bản"
                        },
                        new
                        {
                            Id = new Guid("620d9ca5-c6a0-4b2c-9d20-b42635a9376c"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giải thích về khái niệm biến, biểu thức và các phép toán cơ bản trong lập trình C. Chương này sẽ cung cấp các ví dụ minh họa cách khai báo và sử dụng biến...",
                            IsDeleted = false,
                            Number = 3,
                            Topic = "Chương 3 : Cấu trúc logic và phong cách lập trình trong C"
                        },
                        new
                        {
                            Id = new Guid("d42aaba5-c73e-4494-968c-4dda0baf33f4"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giải thích về khái niệm biến, biểu thức và các phép toán cơ bản trong lập trình C. Chương này sẽ cung cấp các ví dụ minh họa cách khai báo và sử dụng biến...",
                            IsDeleted = false,
                            Number = 4,
                            Topic = "Chương 4 : Tính modular và các hàm trong lập trình C"
                        },
                        new
                        {
                            Id = new Guid("aad07753-6f1c-41ab-ae04-d6acad448216"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chương này sẽ giới thiệu các thư viện chuẩn của ngôn ngữ C, cách sử dụng chúng trong chương trình. Học viên sẽ học cách khai báo và sử dụng các hàm từ thư viện...",
                            IsDeleted = false,
                            Number = 5,
                            Topic = "Chương 5 : Thư viện C và cách sử dụng"
                        },
                        new
                        {
                            Id = new Guid("b91e33b2-3810-4d7f-bafb-4190831e0ae4"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Học viên sẽ tìm hiểu về mảng (arrays) trong lập trình C, cách khai báo và sử dụng mảng một chiều và hai chiều...",
                            IsDeleted = false,
                            Number = 6,
                            Topic = "Chương 6 : Mảng và cách sử dụng trong lập trình C"
                        },
                        new
                        {
                            Id = new Guid("7aa7aa40-7f23-4c73-9375-7171a284f370"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chương này tập trung vào khái niệm chuỗi (strings) trong ngôn ngữ C, cách khai báo và xử lý chuỗi...",
                            IsDeleted = false,
                            Number = 7,
                            Topic = "Chương 7 : Chuỗi và cách sử dụng trong lập trình C"
                        },
                        new
                        {
                            Id = new Guid("c34aee85-2527-4b7e-9117-eff651cdad70"),
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hướng dẫn cách sử dụng tệp trong lập trình C để lưu trữ và xử lý dữ liệu. Chương này sẽ bao gồm cách mở, đọc, ghi, và đóng tệp...",
                            IsDeleted = false,
                            Number = 8,
                            Topic = "Chương 8 : Tệp và cách sử dụng trong lập trình C"
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ChapterMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterMaterials");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentEnrollment")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99e3af58-64b4-4304-ae6a-2d8782e9caed"),
                            Capacity = 30,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentEnrollment = 1,
                            IsDeleted = false,
                            Name = "JAVA_TEST_SU25"
                        },
                        new
                        {
                            Id = new Guid("99129374-30f6-4f57-978f-583353684ca5"),
                            Capacity = 30,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentEnrollment = 1,
                            IsDeleted = false,
                            Name = "OOP_TEST_SU25"
                        },
                        new
                        {
                            Id = new Guid("a2a94ddc-ff9e-484c-8d2a-6f9d5dd21279"),
                            Capacity = 30,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentEnrollment = 1,
                            IsDeleted = false,
                            Name = "MLN131_TEST_SU25"
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ClassRoom", b =>
                {
                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DayofWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("ClassId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ClassSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SlotId");

                    b.ToTable("ClassSchedules");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ContractDocumentImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermsAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550ee872-ea09-42a0-b9ac-809890debafb"),
                            Amount = 0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 0,
                            EndTime = new DateTime(2024, 10, 31, 14, 10, 30, 775, DateTimeKind.Local).AddTicks(4672),
                            IsDeleted = false,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 0
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfLession")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URLImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            Code = "PRF",
                            CourseCategoryId = new Guid("f8fd80dd-c470-4ecf-7940-08dcf20adbbc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Khóa học lập trình căn bản với ngữ C giành cho người mới bắt đầu học lập trình",
                            IsDeleted = false,
                            Name = "Nhập môn lập trình với C",
                            NumberOfLession = 20,
                            Price = 2000000,
                            Status = 0,
                            SyllabusId = new Guid("990ca87d-c261-4cb3-1b9d-08dcf34d3900"),
                            URLImage = "string",
                            Version = 0
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.CourseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoursesCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("264c1d37-40f3-4dd9-793e-08dcf20adbbc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Các khóa học liên quan đến thuật toán, bao gồm các khái niệm cơ bản, các loại thuật toán, và ứng dụng của chúng trong lập trình và khoa học máy tính.",
                            IsDeleted = false,
                            Name = "Thuật toán"
                        },
                        new
                        {
                            Id = new Guid("f1390dbc-82f7-4cd4-793f-08dcf20adbbc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Các khóa học cung cấp kiến thức nền tảng về khoa học máy tính, bao gồm các khái niệm cơ bản, ngôn ngữ lập trình cơ bản, và các nguyên lý thiết kế hệ thống.",
                            IsDeleted = false,
                            Name = "Kiến thức cơ sở"
                        },
                        new
                        {
                            Id = new Guid("f8fd80dd-c470-4ecf-7940-08dcf20adbbc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Các khóa học tập trung vào các kỹ năng lập trình cơ bản, như lập trình hướng đối tượng, cấu trúc dữ liệu, và thuật toán cơ bản, giúp học viên xây dựng nền tảng vững chắc trong lập trình.",
                            IsDeleted = false,
                            Name = "Lập trình cơ sở"
                        },
                        new
                        {
                            Id = new Guid("228efc7b-2659-4186-7941-08dcf20adbbc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Các khóa học chuyên sâu về lập trình, bao gồm các kỹ thuật lập trình phức tạp, thiết kế hệ thống, lập trình đa luồng, và tối ưu hóa hiệu suất ứng dụng.",
                            IsDeleted = false,
                            Name = "Lập trình nâng cao"
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.CourseMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseMaterials");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Quizs");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.QuizDetail", b =>
                {
                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuizTestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizDetails");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.RegisterCourse", b =>
                {
                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentCourseStatus")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RegisterCourses");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.RegisterForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsultTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsultanId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RegisterForms");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ScoreNumber")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chapter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72f4230e-1237-4d3d-b4b9-cbf9673a7099"),
                            Chapter = "Chương 1",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu tổng quan về khóa học, các chủ đề sẽ được học, yêu cầu và phương pháp đánh giá.",
                            IsDeleted = false,
                            Number = 1,
                            Topic = "Giới thiệu khóa học"
                        },
                        new
                        {
                            Id = new Guid("5e767e8f-ba8c-4b99-93d1-9cb81cf5dabd"),
                            Chapter = "Chương 1",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hướng dẫn cài đặt và cấu hình công cụ lập trình, giới thiệu môi trường làm việc cho lập trình C.",
                            IsDeleted = false,
                            Number = 2,
                            Topic = "Cài đặt Công cụ Lập trình"
                        },
                        new
                        {
                            Id = new Guid("4bae4897-8b17-44a8-b1c5-4dd226a2002a"),
                            Chapter = "Chương 1",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu ngôn ngữ lập trình C, cách thức hoạt động của trình biên dịch C, và cú pháp cơ bản.",
                            IsDeleted = false,
                            Number = 3,
                            Topic = "Module A: Giới thiệu về ngôn ngữ lập trình C và Trình biên dịch C"
                        },
                        new
                        {
                            Id = new Guid("089a850e-871c-419b-b298-e4050ce352ce"),
                            Chapter = "Chương 1",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu cấu trúc bài tập, cách thức nộp bài và yêu cầu cần đạt.",
                            IsDeleted = false,
                            Number = 4,
                            Topic = "Giới thiệu về bài tập"
                        },
                        new
                        {
                            Id = new Guid("468da4f5-1517-44ed-8c13-a7472346a880"),
                            Chapter = "Chương 2",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tìm hiểu về các biến trong C, cách khai báo, kiểu dữ liệu và cách thức sử dụng biến trong tính toán.",
                            IsDeleted = false,
                            Number = 5,
                            Topic = "Module B: Tính toán - Biến số"
                        },
                        new
                        {
                            Id = new Guid("a46622ff-1774-4e63-bada-4eea0b5a2985"),
                            Chapter = "Chương 2",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giải thích các thao tác bộ nhớ trong C, cách lưu trữ và xử lý dữ liệu trong bộ nhớ.",
                            IsDeleted = false,
                            Number = 6,
                            Topic = "Module B: Tính toán - Các thao tác bộ nhớ cơ bản"
                        },
                        new
                        {
                            Id = new Guid("b3394968-2c79-46a8-a612-2c775bac4483"),
                            Chapter = "",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu các biểu thức trong C, các phép toán cơ bản như cộng, trừ, nhân, chia, và các phép toán logic.",
                            IsDeleted = false,
                            Number = 7,
                            Topic = "Tính toán cơ bản: Biểu thức"
                        },
                        new
                        {
                            Id = new Guid("48e672bd-791d-4802-ac18-cdfd11d503e2"),
                            Chapter = "Chương 3",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Học về các cấu trúc điều khiển trong C như cấu trúc trình tự và cấu trúc lựa chọn (if, switch).",
                            IsDeleted = false,
                            Number = 8,
                            Topic = "Module C: Lô-gic cơ bản - Cấu trúc trình tự, Cấu trúc lựa chọn"
                        },
                        new
                        {
                            Id = new Guid("8edce6e3-7429-4bde-a8ed-cb0121856432"),
                            Chapter = "Chương 3",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu các cấu trúc lặp trong C như for, while, và do-while, cách sử dụng chúng trong lập trình.",
                            IsDeleted = false,
                            Number = 9,
                            Topic = "Module C: Lô-gic cơ bản - Cấu trúc lặp"
                        },
                        new
                        {
                            Id = new Guid("b6e9d3ee-ebbe-4719-a3c8-93bbd75bb6f1"),
                            Chapter = "Chương 3",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Học cách viết mã có cấu trúc, dễ hiểu, tuân thủ các quy tắc về phong cách lập trình tốt.",
                            IsDeleted = false,
                            Number = 10,
                            Topic = "Module C: Lô-gic cơ bản - Phong cách lập trình"
                        },
                        new
                        {
                            Id = new Guid("e5ca7c5a-f62f-4828-8c14-56f988af5a57"),
                            Chapter = "Chương 3",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hướng dẫn chi tiết về cách sử dụng các cấu trúc logic trong việc giải quyết các bài toán thực tế.",
                            IsDeleted = false,
                            Number = 11,
                            Topic = "Lô-gic cơ bản: Walkthroughs"
                        },
                        new
                        {
                            Id = new Guid("c6c394b8-60c1-4dc9-8585-2efc60deb660"),
                            Chapter = "Chương 1, 2, 3",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thực hành về các kỹ năng nhập/xuất dữ liệu, tính toán và sử dụng các cấu trúc logic cơ bản.",
                            IsDeleted = false,
                            Number = 12,
                            Topic = "Workshop 1: Nhập/Xuất, tính toán và lô-gic cơ bản"
                        },
                        new
                        {
                            Id = new Guid("2a4cb11a-4e21-4f71-9e55-4adada9ee4d4"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu khái niệm tính mô-đun, cách sử dụng hàm trong C và phạm vi của biến trong lập trình.",
                            IsDeleted = false,
                            Number = 13,
                            Topic = "Module D: Tính mô-đun và Hàm - Hàm C, Phạm vi biến"
                        },
                        new
                        {
                            Id = new Guid("20b7ce32-3d7c-4f88-b410-55151850416a"),
                            Chapter = "Chương 1, 2, 3",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đánh giá kết quả của workshop 1 và phân tích lỗi thường gặp.",
                            IsDeleted = false,
                            Number = 14,
                            Topic = "Đánh giá Workshop 1"
                        },
                        new
                        {
                            Id = new Guid("c46ff39f-3b4d-4d4d-b241-78915bab76e0"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tìm hiểu sâu hơn về cách chia chương trình thành các mô-đun và sử dụng hàm trong lập trình.",
                            IsDeleted = false,
                            Number = 15,
                            Topic = "Tính mô-đun và Hàm"
                        },
                        new
                        {
                            Id = new Guid("5dbfc692-cb96-42b2-af94-893b5fce9d69"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thực hành viết và sử dụng hàm, tối ưu hóa mã nguồn bằng cách chia thành các mô-đun.",
                            IsDeleted = false,
                            Number = 16,
                            Topic = "Tính mô-đun và Hàm"
                        },
                        new
                        {
                            Id = new Guid("d0fbf5a6-dbb9-49a8-a139-3e1f8d623022"),
                            Chapter = "",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tiếp tục thực hành về hàm và tính mô-đun.",
                            IsDeleted = false,
                            Number = 17,
                            Topic = "Tính mô-đun và Hàm"
                        },
                        new
                        {
                            Id = new Guid("781841d0-6550-4d9c-824b-7a0b07dd194e"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thực hành các bài tập liên quan đến tính mô-đun và sử dụng hàm trong C.",
                            IsDeleted = false,
                            Number = 18,
                            Topic = "Workshop 2: Tính mô-đun và Hàm"
                        },
                        new
                        {
                            Id = new Guid("4f22526e-ff9d-4e65-b5f4-bd70e68a936c"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giới thiệu khái niệm con trỏ, cách khai báo, sử dụng và các ứng dụng của con trỏ trong lập trình.",
                            IsDeleted = false,
                            Number = 19,
                            Topic = "Con trỏ"
                        },
                        new
                        {
                            Id = new Guid("9a564278-61f3-42a2-832b-fbc4c6babe8e"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thực hành với các bài tập sử dụng con trỏ để quản lý bộ nhớ và dữ liệu.",
                            IsDeleted = false,
                            Number = 20,
                            Topic = "Con trỏ"
                        },
                        new
                        {
                            Id = new Guid("16638183-edb0-4071-8316-8e69c06a6134"),
                            Chapter = "Chương 4",
                            CourseId = new Guid("1b182028-e25d-43b0-ba63-08dcf207c014"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tiếp tục thực hành và làm quen với con trỏ trong lập trình C.",
                            IsDeleted = false,
                            Number = 21,
                            Topic = "Con trỏ"
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("849116fa-dd9c-49a4-a019-7616b7447ae9"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            Name = "SLot 1",
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a994e524-943d-4022-b258-de37662055c9"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 21, 0, 0, 0),
                            IsDeleted = false,
                            Name = "SLot 2",
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.StudentAnswer", b =>
                {
                    b.Property<Guid?>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionOptionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Syllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("MinAvgMarkToPass")
                        .HasColumnType("float");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Scale")
                        .HasColumnType("float");

                    b.Property<string>("StudentTask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeAllocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToolsRequire")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Syllabuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("990ca87d-c261-4cb3-1b9d-08dcf34d3900"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Khóa học này sẽ cung cấp kiến thức cơ bản về lý thuyết thông tin, hệ thống máy tính và các phương pháp phát triển phần mềm, với trọng tâm vào lập trình hướng thủ tục (function-oriented programming). Học viên sẽ học các kỹ năng liên quan đến thiết kế chương trình, viết mã, kiểm thử và phát triển kỷ luật lập trình.\"",
                            IsDeleted = false,
                            MinAvgMarkToPass = 5.0,
                            Scale = 10.0,
                            StudentTask = "Học sinh có trách nhiệm làm tất cả các bài tập được giao bởi giảng viên trên lớp hoặc ở nhà và nộp đúng hạn",
                            TimeAllocation = "Giờ học (150 giờ) = 45 giờ học trên lớp(60 * 45') + 1 giờ thi cuối kỳ + 104 giờ tự học",
                            ToolsRequire = "- Internet\n- C language utility"
                        });
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Expire")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireOTPEmail")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTPEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentPaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("URLImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.WorkDetail", b =>
                {
                    b.Property<Guid?>("WorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WorkId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.AppointmentDetail", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("FranchiseProject.Domain.Entity.Appointment", "Appointment")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Assessment", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Assignment", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Class", "Class")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.AssignmentSubmit", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Assignment", "Assignment")
                        .WithMany("AssignmentSubmits")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("AssignmentSubmits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Attendance", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.ClassSchedule", "ClassSchedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Chapter", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ChapterMaterial", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Chapter", "Chapter")
                        .WithMany("ChapterMaterials")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Class", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId");

                    b.Navigation("Agency");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ClassRoom", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Class", "Class")
                        .WithMany("ClassRooms")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("ClassRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ClassSchedule", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Class", "Class")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ClassId");

                    b.HasOne("FranchiseProject.Domain.Entity.Slot", "Slot")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("SlotId");

                    b.Navigation("Class");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Contract", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Agency", "Agency")
                        .WithMany("Contracts")
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Course", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId");

                    b.HasOne("FranchiseProject.Domain.Entity.Syllabus", "Syllabus")
                        .WithMany("Courses")
                        .HasForeignKey("SyllabusId");

                    b.Navigation("CourseCategory");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.CourseMaterial", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("CourseMaterials")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Feedback", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Class", "Class")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ClassId");

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Notification", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("FranchiseProject.Domain.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Payment", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId");

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Question", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.QuestionOption", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Quiz", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Class", "Class")
                        .WithMany("Quizzes")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.QuizDetail", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Question", "Question")
                        .WithMany("QuizDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.Quiz", "Quiz")
                        .WithMany("QuizDetails")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.RefreshToken", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.RegisterCourse", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("RegisterCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("RegisterCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.RegisterForm", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Report", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("Reports")
                        .HasForeignKey("CourseId");

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Score", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Quiz", "Quiz")
                        .WithMany("Scores")
                        .HasForeignKey("QuizId");

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Session", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Slot", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Agency", "Agency")
                        .WithMany("Slots")
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.StudentAnswer", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.QuestionOption", "QuestionOptions")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOptions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.User", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.UserRole", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.WorkDetail", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", "User")
                        .WithMany("WorkDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranchiseProject.Domain.Entity.Work", "Work")
                        .WithMany("WorkDetails")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FranchiseProject.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Agency", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Appointment", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Assignment", b =>
                {
                    b.Navigation("AssignmentSubmits");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Chapter", b =>
                {
                    b.Navigation("ChapterMaterials");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Class", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ClassRooms");

                    b.Navigation("ClassSchedules");

                    b.Navigation("Feedbacks");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.ClassSchedule", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Contract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Course", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Chapters");

                    b.Navigation("Classes");

                    b.Navigation("CourseMaterials");

                    b.Navigation("RegisterCourses");

                    b.Navigation("Reports");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("QuizDetails");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.QuestionOption", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Quiz", b =>
                {
                    b.Navigation("QuizDetails");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Slot", b =>
                {
                    b.Navigation("ClassSchedules");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Syllabus", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.User", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("AssignmentSubmits");

                    b.Navigation("Attendances");

                    b.Navigation("ClassRooms");

                    b.Navigation("Feedbacks");

                    b.Navigation("RegisterCourses");

                    b.Navigation("Reports");

                    b.Navigation("Scores");

                    b.Navigation("StudentAnswers");

                    b.Navigation("UserRoles");

                    b.Navigation("WorkDetails");
                });

            modelBuilder.Entity("FranchiseProject.Domain.Entity.Work", b =>
                {
                    b.Navigation("WorkDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
